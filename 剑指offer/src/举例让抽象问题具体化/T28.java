package 举例让抽象问题具体化;

import java.util.Stack;

//输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，
//序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。
//示例 1：
//
//输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
//输出：true
//解释：我们可以按以下顺序执行：
//push(1), push(2), push(3), push(4), pop() -> 4,
//push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1
//示例 2：
//
//输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
//输出：false 
//解释：1 不能在 2 之前弹出。
  ////////////

public class T28 {
	//贪心算法   使用辅助栈   popped 是一个数组不是栈
	public static boolean validateStackSequences(int[] pushed, int[] popped) {
		Stack<Integer> a = new Stack<>();// 不能省Integer 否则popped[j] 会报错
		int j = 0;
		int n = popped.length;
		for (int i = 0; i < pushed.length; i++) {
			a.push(pushed[i]);
			while (!a.isEmpty() && j < n && a.peek() == popped[j]) {
				a.pop();
				j++;
			}
		}
		return a.isEmpty();
	}

	public static void main(String[] args) {
		int[] a = new int[] { 1, 2, 3, 4, 5 };
		int[] b = new int[] { 4, 5, 3, 2, 1 };
		int[] c = new int[] {4,3,5,1,2};
		System.out.println(validateStackSequences(a, b));
		System.out.println(validateStackSequences(a, c));
	}
}
